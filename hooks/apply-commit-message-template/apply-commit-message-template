#!/usr/bin/env bash

# When committing with "git commit -m <message>" flag, PRE_COMMIT_COMMIT_MSG_SOURCE will contain
# "message", and the COMMIT_EDITMSG file will contain the <message>. In this case, no editor
# for the commit message will be opened, so we don't need to enter the template. This is also the
# case for when running "git commit" with the --amend flag. In this case PRE_COMMIT_COMMIT_MSG_SOURCE
# contains 'commit'.
#
# When committing without the -m flag: "git commit", the commit message editor will be opened
# with the contents of COMMIT_EDITMSG, which we set to our template

apply_message_template() {

    # Get the directory from the path - This is needed since this will be stored in a cache
    # directory so we need the path to that to access the template file with the correct path
    dir_path=$(dirname "$0")

    filename=".gitmessage_template"

    # Concatenate the directory path with the filename
    full_path="${dir_path}/${filename}"

    cat "$full_path" > .git/COMMIT_EDITMSG


}

# The PRE_COMMIT_COMMIT_MSG_SOURCE is the second argument passed to prepare-commit-msg hooks.
# You can see the different options here: https://git-scm.com/docs/githooks#_prepare_commit_msg
case "$PRE_COMMIT_COMMIT_MSG_SOURCE" in

    "message")
        # Do nothing, this is when you commit with -m
    ;;
    "template")
        # Do nothing, this is when you commit with -t
    ;;
    "commit")
        # Do nothing, this is called when you commit with -C, -c or --amend options
    ;;
    "merge")
        # Do nothing, this is called when doing a merge, and some other situations like revert
    ;;
    "squash")
        # Do nothing, this is called when doing a squash, e.g. during interactive rebase
    ;;

    "")
        apply_message_template
    ;;

    *)
        echo "$PRE_COMMIT_COMMIT_MSG_SOURCE source type not handled"
        exit 1
    ;;

esac
